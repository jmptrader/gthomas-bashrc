#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

#echo _SSH_AGENT=$_SSH_AGENT
if [[ -z "$_SSH_AGENT" ]]; then
    ga
    export _SSH_AGENT=$$
fi


if [[ -z "$_PATH_HAS_BEEN_SET" ]]; then
    export CDPATH=.:~:$GOPATH/src/github.com/tgulacsi

    if [[ -d "$HOME/bin" ]] && echo "$PATH" | grep -vq $HOME/bin; then
        export PATH="$HOME/bin:$PATH"
    fi
    _PATH_HAS_BEEN_SET=1
fi

if [[ -z "_GOPATH_HAS_BEEN_SET" ]]; then
    if [[ -z "$GOPATH" ]]; then
        GOPATH=$HOME
        if [ -d "$GOPATH" ]; then
            export GOPATH
            if [[ -x /usr/local/go/bin/go ]]; then
                export GOROOT=/usr/local/go
                PATH=$GOROOT/bin:$PATH
            fi
            if [[ $GOPATH != $HOME ]]; then
                export PATH=$PATH:$GOPATH/bin
            fi
            export PATH
        fi
    fi
    _GOPATH_HAS_BEEN_SET=1
fi

if [[ -z "_OHOME_HAS_BEEN_SET" ]]; then
    #echo OH=$ORACLE_HOME
    if [[ -z "$ORACLE_HOME" ]]; then
        for bdn in /u01/app/oracle/product /usr/lib/oracle; do
            #echo "bdn=$bdn"
            if [[ ! -d $bdn ]]; then
                continue
            fi
            find "$bdn" -maxdepth 2 -type d \( -name xe -o -name client64 \) \
                    2>/dev/null | head -n1 | while read dn; do
                #echo "#dn=$dn"
                export ORACLE_BASE=$bdn
                export ORACLE_HOME=$dn
                #export ORACLE_SID=XE
                export PATH=$ORACLE_HOME/bin:$PATH
                #echo "H=$ORACLE_HOME"
                break
            done
            break
        done
    fi
    #echo OH=$ORACLE_HOME
    _OHOME_HAS_BEEN_SET=1
fi

if [ -z "$SUDO_ASKPASS" ]; then
    export SUDO_ASKPASS=/usr/bin/ssh-askpass
fi


if [[ -z "$_ALIASES_HAS_BEEN_SET" ]]; then
    # enable color support of ls and also add handy aliases
    if [[ -x /usr/bin/dircolors ]]; then
        if [[ -r ~/.dircolors ]]; then
            eval "$(dircolors -b ~/.dircolors)"
        else
            eval "$(dircolors -b)"
        fi
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -lA'
    alias cp='cp --reflink=auto'

    # Alias definitions.
    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.

    if [[ -f ~/.bash_aliases ]]; then
        . ~/.bash_aliases
    fi
    _ALIASES_HAS_BEEN_SET=1
fi

if [[ -z "$_ULIMIT_HAS_BEEN_SET" ]]; then
    #ulimit -v 2048000 -m 2048000 -d 2048000
    memsize=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
    ulimit -S -d $memsize
    ulimit -S -m $(( $memsize * 3 / 4 ))
    ulimit -S -v $(( $memsize * 4 / 3 ))

    set -o vi
    _ULIMIT_HAS_BEEN_SET=1
fi

if [[ -z "$_PROMPT_HAS_BEEN_SET" ]]; then
    # don't put duplicate lines in the history. See bash(1) for more options
    # ... or force ignoredups and ignorespace
    HISTCONTROL=ignoredups:ignorespace
    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000

    if [[ -n "$BASH_VERSION" ]]; then
        # append to the history file, don't overwrite it
        shopt -s histappend

        # check the window size after each command and, if necessary,
        # update the values of LINES and COLUMNS.
        shopt -s checkwinsize

        # enable programmable completion features (you don't need to enable
        # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
        # sources /etc/bash.bashrc).
        if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
            . /etc/bash_completion
        fi
    fi

    # make less more friendly for non-text input files, see lesspipe(1)
    [[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

    # set variable identifying the chroot you work in (used in the prompt below)
    if [[ -z "$debian_chroot" ]] && [[ -r /etc/debian_chroot ]]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm|xterm-color) color_prompt=yes; export TERM=xterm-256color;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [[ -n "$force_color_prompt" ]]; then
        if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        PS1='\[\033[00;32m\]\u\[\033[00;33m\]@\[\033[00;32m\]\h\[\033[01;30m\]:\[\033[01;36m\]\w\[\033[01;37m\]$ \[\033[00m\]'
        ;;
    *)
        ;;
    esac

    _PROMPT_HAS_BEEN_SET=1
fi

#[ -x ~/bin/uno-ssh ] && . ~/bin/uno-ssh
# tmux
#echo TERM="$TERM"
if [[ "$TERM" != 'dumb' ]]; then
    if which tmux 2>&1 >/dev/null; then
        if [[ -n "$TMUX" ]]; then
            export TERM=screen-256color
        else
            export TERM=xterm-256color
            if [[ "$TERM" != 'sakura' ]]; then
                last=$(tmux list-sessions -F '#S #{session_attached}' \
                    | grep '0$' | cut '-d ' -f1 | sort -n | head -n1)
                if [[ -n "$last" ]]; then
                    exec tmux attach-session -t "$last"
                fi
                exec tmux
            fi
        fi
    fi
fi

