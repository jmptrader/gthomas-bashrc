#!/usr/bin/env python
# !! python2 !!

import time
import os
import sys
import subprocess
Popen = subprocess.Popen
PIPE = subprocess.PIPE
import logging
LOG = logging.getLogger(__name__)

DN = os.path.dirname(__file__)
USER = os.environ['USER']
BASE = os.path.expandvars('$HOME/mnt')
PASSWD = os.path.expandvars('$HOME/.ssh/smb-unosoft.passwd')
uname = os.uname()[1]
SSH_HOSTS = ('p520', 'gho', 'miranda', 'unointra', 'unowebprd')
ENCODING = sys.getfilesystemencoding()


def execute(cmd, timeout=None, catch_stdout=False):
    LOG.debug('# executing %r', ' '.join('"%s"' % x if ' ' in x else x
            for x in ('PASSWD=***' if x.startswith('PASSWD=') else x
        for x in cmd)))
    p = Popen(cmd, stdout=PIPE if catch_stdout else None)
    if timeout:
        pid = p.pid
        if pid:

            def on_timeout(signum, frame):
                LOG.warn('TIMEOUT')
                signal.alarm(0)
                os.kill(pid, signal.SIGABRT)
            import signal
            signal.signal(signal.SIGALRM, on_timeout)
            signal.alarm(timeout)
    stdout, stderr = p.communicate()
    LOG.debug('%r: %r', cmd, stdout)
    rc = p.returncode
    if rc != 0:
        LOG.error('%r: %s=%s', cmd, rc, stderr)
    return (rc, stdout, stderr)


def kill_sshfs(mountpoint=None):
    p = Popen(['ps', '-ef'], stdout=PIPE)
    for line in p.stdout:
        line = unicode(line, ENCODING)
        # LOG.debug('#  in line %r ?%s', line, 'sshfs' in line)
        if 'sshfs' in line and (not mountpoint or mountpoint in line):
            LOG.debug('# pid from %r', line)
            pid = int(line.split(None, 2)[1])
            LOG.info('# killing %r', pid)
            if 0 != execute(['kill', str(pid)])[0]:
                time.sleep(1)
                execute(['kill', '-9', str(pid)])


def walk_hosts(root=BASE):
    for fn in os.listdir(root):
        if os.path.isdir(root + '/' + fn):
            if 'na' == fn:
                continue
            host = fn
            for fn in os.listdir(root + '/' + host):
                if True or os.path.isdir(root + '/' + host + '/' + fn):
                    nm = fn
                    yield (root, host, nm)


def mount_host_nm(base, host, nm, params):
    passwd = params.get('passwd')
    path = '/'.join((base, host, nm))
    if host in SSH_HOSTS and params['use_sshfs']:
        userhost = (host if (uname == 'hackworth'
                or host in ('unowebprd', 'unointra'))
            else 'ablkd' if 'ablak3' == nm else nm + 'd')
        load_sshfs()

        cmd = ['sshfs', userhost + ':/home/' + nm, path,
            '-o', 'idmap=user,follow_symlinks,large_read,direct_io']

        rc = execute(cmd)
        assert 0 == rc[0], 'sshfs rc:%s\ncmd: %s' % (tuple([rc]),
            ' '.join(cmd))
    else:
        if not passwd:
            passwd = params['passwd'] = open(PASSWD, 'rU').readline().rstrip()

        cred = ('user=' + USER if 'unointra' == host
            else 'user=unosoft/' + USER + ',domain=unosoft')
        opts = [cred, 'rw,iocharset=utf8', 'uid=' + USER,
            'gid=users']
        if 'unots' == host:
            opts.append('nounix,sec=ntlmv2')
        else:
            opts.append('sfu')
        rc = execute(['sudo', 'env', 'PASSWD=' + passwd,
            'mount', '-t', 'cifs',
            '//' + host + '/' + nm, path, '-o', ','.join(opts),
            '--verbose'])
        if 0 != rc[0]:
            LOG.error('!!! rc=%r', rc)


def main(umount=True, umount_only=False, use_sshfs=False):
    #if True or not os.environ.get('SSH_AGENT_PID'):
    #    p = Popen(['sh', '-c', '. %s/uno-ssh ; set' % DN], stdout=PIPE)
    #    for line in p.stdout:
    #        line = line.decode(ENCODING)
    #        if line.startswith('SSH'):
    #            k, v = line.rstrip().split('=', 1)
    #            os.environ[k] = v
    (out, err) = Popen(['keychain', '--eval', 'tgulacsi@unosoft', 'id_rsa'],
            stdout=PIPE).communicate()
    env = os.environ
    for line in out.splitlines():
        if not line.startswith('SSH_'):
            continue
        line = line.split(';', 1)[0]
        k, v = line.split('=', 1)
        env[k] = v
    ssh_env = [tup for tup in env.iteritems() if tup[0].startswith('SSH_')]
    LOG.info('ssh_env=%r', ssh_env)
    assert ssh_env, 'ssh_env is empty!'
    assert 0 == execute(['sudo', 'sh', '-c', 'echo sudo OK'])[0]
    #os.environ['SSH_AUTH_SOCK'] = '/tmp/%s-ssh-agent.sock' % os.environ['USER']
    #rc = execute(['ssh-add', '-l'], catch_stdout=True)
    #LOG.debug('rc: %r', rc)
    #if not (0 == rc[0] and 'tgulacsi@unosoft' in unicode(rc[1], ENCODING)):
    #    rc = execute(['ssh-add',
    #        os.path.expandvars('$HOME/.ssh/tgulacsi@unosoft')])
    #    LOG.debug(rc)

    if umount or umount_only:
        LOG.info('## umounts')
        for base, host, nm in walk_hosts():
            path = base + '/' + host + '/' + nm
            LOG.info('# umounting %s', path)
            execute(['sudo', 'umount', '-lf', path])

        kill_sshfs()

    if not umount_only:
        params = {'use_sshfs': use_sshfs}
        for base, host, nm in walk_hosts():
            mount_host_nm(base, host, nm, params)
        # assert 0 == rc, rc

sshfs_loaded = None
def load_sshfs():
    global sshfs_loaded
    if sshfs_loaded is None:
        p = Popen(['lsmod'], stdout=PIPE)
        for line in p.stdout:
            line = unicode(line, ENCODING)
            if 'fuse' in line:
                sshfs_loaded = True
                break
        if not sshfs_loaded:
            execute(['sudo', 'modprobe', '-v', 'fuse'])
            sshfs_loaded = True
    return sshfs_loaded

if '__main__' == __name__:
    import optparse
    op = optparse.OptionParser()
    op.add_option('--no-umount', action='store_true', default=False)
    op.add_option('-u', '--umount', default=False, action='store_true',
        help='unmount only')
    op.add_option('-v', '--verbose', action='store_true', default=False)
    op.add_option('--nosshfs', action='store_true', default=False)
    opts, args = op.parse_args()
    if opts.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO, fmt='%(message)s')
    main(umount=not opts.no_umount, umount_only=opts.umount,
        use_sshfs=not opts.nosshfs)
